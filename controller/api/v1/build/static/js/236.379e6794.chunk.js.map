{"version":3,"file":"static/js/236.379e6794.chunk.js","mappings":"wJAeA,IAb4B,SAAC,GAA6C,IAA3CA,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QACzD,OACE,SAAC,IAAD,CACEJ,MAAOA,EACPE,MAAOA,GAAgB,OACvBC,GAAIA,EACJC,QAASA,EAJX,SAMGH,M,0IC0JP,UA5JgC,WAC9B,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAS,8CAETC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,IAAYC,eACdF,EAASC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,aAAe,uCAYpCC,IAAAA,IACOH,GACJI,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAASR,MACrBC,EAAQO,EAASR,SAElBW,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,QAE/B,IAEH,IAAMC,EAA0B,yCAAG,yFAC7BV,EAAS,6CAETC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,eACdF,EAASC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,aAAe,uCAJL,4DAqBzBS,EAAAA,GAAAA,QACJR,IAAAA,IACOH,GACJI,MAAK,SAAAC,GACJP,EAAQO,EAASR,MACjBc,EAAAA,GAAAA,QAAc,sCAEfH,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,MAC9B,CACEG,QAAS,kBA9BkB,2CAAH,qDAoChC,OACE,iCACE,gBAAKC,MAAO,CAAEC,OAAQ,QAAtB,UACE,SAAC,KAAD,CACED,MAAO,CAAEE,QAAS,QAClBC,OACE,SAAC,IAAD,CACErB,QAAQ,KACRD,GAAI,CAAEuB,eAAgB,aAFxB,kCAOFpB,KAAMA,EACNqB,QAAS,CACP,CACEF,OACE,SAAC,IAAD,CAAqBrB,QAAQ,KAA7B,wBAIFwB,MAAO,aACPC,KAAM,YAER,CACEJ,OACE,SAAC,IAAD,CAAqBrB,QAAQ,KAA7B,2BAIFwB,MAAO,iBAET,CACEH,OACE,SAAC,IAAD,CAAqBrB,QAAQ,KAA7B,sCAIFwB,MAAO,4BAET,CACEH,OACE,SAAC,IAAD,CAAqBrB,QAAQ,KAA7B,gCAIFwB,MAAO,SAET,CACEH,OACE,SAAC,IAAD,CAAqBrB,QAAQ,KAA7B,sBAEFwB,MAAO,YAET,CACEH,OACE,SAAC,IAAD,CAAqBrB,QAAQ,KAA7B,wBAIFwB,MAAO,aACPC,KAAM,aAGVC,QAAS,CACP,CACEC,KAAM,kBAAM,SAAC,IAAD,KACZC,QAAS,kBACTC,cAAc,EACdC,QAAS,kBAAMf,OAWnBgB,QAAS,CACPC,oBAAqB,QAK3B,gBAAKd,MAAO,CAAEe,aAAc","sources":["components/Typography.jsx","pages/Records/index.jsx"],"sourcesContent":["import { Typography } from '@mui/material'\n\nconst TypographyComponent = ({ align, children, color, sx, variant }) => {\n  return (\n    <Typography\n      align={align}\n      color={color ? color : '#777'}\n      sx={sx}\n      variant={variant}\n    >\n      {children}\n    </Typography>\n  )\n}\n\nexport default TypographyComponent\n","import MaterialTable from '@material-table/core'\nimport { Refresh } from '@mui/icons-material'\nimport axios from 'axios'\nimport { useEffect, useState } from 'react'\nimport { toast } from 'react-toastify'\n// components\nimport TypographyComponent from '../../components/Typography'\n\nconst PresentationRecordsPage = () => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    let apiURL = '/api/v1/cornerstone/verifier/presentations'\n\n    if (process.env.API_BASE_URL) {\n      apiURL = process.env.API_BASE_URL + '/cornerstone/verifier/presentations'\n    }\n\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      axios\n        .get(process.env.REACT_APP_API_URL + 'presentations')\n        .then(response => {\n          console.log(response.data)\n          setData(response.data)\n        })\n        .catch(error => console.log(error))\n    } else {\n      axios\n        .get(apiURL)\n        .then(response => {\n          console.log(response.data)\n          setData(response.data)\n        })\n        .catch(error => console.log(error))\n    }\n  }, [])\n\n  const refreshVerificationRecords = async () => {\n    let apiURL = '/api/v1/cornerstone/verifier/presentations'\n\n    if (process.env.API_BASE_URL) {\n      apiURL = process.env.API_BASE_URL + '/cornerstone/verifier/presentations'\n    }\n\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n      await toast.promise(\n        axios\n          .get(process.env.REACT_APP_API_URL + 'presentations')\n          .then(response => {\n            setData(response.data)\n            toast.success('Refreshed verification records!')\n          })\n          .catch(error => console.log(error)),\n        {\n          pending: 'Refreshing...',\n        }\n      )\n    } else {\n      await toast.promise(\n        axios\n          .get(apiURL)\n          .then(response => {\n            setData(response.data)\n            toast.success('Refreshed verification records!')\n          })\n          .catch(error => console.log(error)),\n        {\n          pending: 'Refreshing...',\n        }\n      )\n    }\n  }\n\n  return (\n    <>\n      <div style={{ margin: '2rem' }}>\n        <MaterialTable\n          style={{ padding: '1rem' }}\n          title={\n            <TypographyComponent\n              variant=\"h5\"\n              sx={{ textDecoration: 'underline' }}\n            >\n              Verification Records\n            </TypographyComponent>\n          }\n          data={data}\n          columns={[\n            {\n              title: (\n                <TypographyComponent variant=\"h6\">\n                  Created On\n                </TypographyComponent>\n              ),\n              field: 'created_at',\n              type: 'datetime',\n            },\n            {\n              title: (\n                <TypographyComponent variant=\"h6\">\n                  Connection ID\n                </TypographyComponent>\n              ),\n              field: 'connection_id',\n            },\n            {\n              title: (\n                <TypographyComponent variant=\"h6\">\n                  Presentation Exchange ID\n                </TypographyComponent>\n              ),\n              field: 'presentation_exchange_id',\n            },\n            {\n              title: (\n                <TypographyComponent variant=\"h6\">\n                  Verification State\n                </TypographyComponent>\n              ),\n              field: 'state',\n            },\n            {\n              title: (\n                <TypographyComponent variant=\"h6\">Verified</TypographyComponent>\n              ),\n              field: 'verified',\n            },\n            {\n              title: (\n                <TypographyComponent variant=\"h6\">\n                  Updated On\n                </TypographyComponent>\n              ),\n              field: 'updated_at',\n              type: 'datetime',\n            },\n          ]}\n          actions={[\n            {\n              icon: () => <Refresh />,\n              tooltip: 'Refresh records',\n              isFreeAction: true,\n              onClick: () => refreshVerificationRecords(),\n            },\n            // rowData => ({\n            //   icon: () => <CredentialIcon />,\n            //   tooltip: 'Issue Credential',\n            //   onClick: () => {\n            //     handleOpen()\n            //     setConnectionId(rowData.connection_id)\n            //   },\n            // }),\n          ]}\n          options={{\n            actionsColumnIndex: -1,\n          }}\n        />\n        {/* {renderModal} */}\n      </div>\n      <div style={{ marginBottom: '2rem' }} />\n    </>\n  )\n}\n\nexport default PresentationRecordsPage\n"],"names":["align","children","color","sx","variant","useState","data","setData","useEffect","apiURL","process","API_BASE_URL","axios","then","response","console","log","catch","error","refreshVerificationRecords","toast","pending","style","margin","padding","title","textDecoration","columns","field","type","actions","icon","tooltip","isFreeAction","onClick","options","actionsColumnIndex","marginBottom"],"sourceRoot":""}